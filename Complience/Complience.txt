üî∑ 1. Vis√£o de Arquitetura
Stakeholders:

Governo/Defesa Civil ‚Äì interesse em monitoramento e resposta r√°pida.

Popula√ß√£o afetada ‚Äì usu√°rios finais do app.

Equipe t√©cnica ‚Äì desenvolvedores e mantenedores das APIs, banco de dados, IoT e mobile.

ONGs e institui√ß√µes de apoio ‚Äì aux√≠lio em zonas de risco.

Parceiros de infraestrutura (cloud, telecom) ‚Äì garantem conectividade e disponibilidade.

Objetivos:

Criar um sistema integrado para monitorar e responder rapidamente a desastres naturais.

Fornecer alertas em tempo real √† popula√ß√£o.

Mapear zonas de risco com dados IoT e imagens.

Centralizar dados de sensores, previs√µes meteorol√≥gicas e status de infraestrutura.

Requisitos:

Sistema de alta disponibilidade e escalabilidade.

APIs RESTful interoper√°veis (Java e .NET).

Integra√ß√£o com sensores IoT (ESP32 + Node-RED).

App mobile multiplataforma (React Native).

Armazenamento e an√°lise de dados em Oracle + MongoDB.

Comunica√ß√£o segura e com autentica√ß√£o (ex: JWT).

Camadas de backend separadas por dom√≠nios (DDD).

üî∑ 2. Arquitetura de Neg√≥cio 
Atores:

Cidad√£o

Operador da Defesa Civil

Administrador da Plataforma

Equipe T√©cnica

Parceiros externos

Fun√ß√µes e pap√©is:

Cidad√£o: consulta alertas, envia localiza√ß√£o, acessa pontos de apoio.

Operador: cadastra ocorr√™ncias, monitora sensores, atua em crises.

Administrador: gerencia permiss√µes, define zonas de risco.

T√©cnicos: mant√™m os sistemas e conectividade.

Parceiros: fornecem dados externos e apoio log√≠stico.

Processos:

Registro e verifica√ß√£o de incidentes (manuais ou autom√°ticos via IoT).

Emiss√£o de alertas geolocalizados.

Atualiza√ß√£o do status de √°reas afetadas.

Consulta de rotas seguras e abrigos.

Relat√≥rios para planejamento e preven√ß√£o.

üî∑ 3. Arquitetura de Sistemas 
Camadas e componentes:

Apresenta√ß√£o (Front-end)

App React Native com Expo

Portal Web (administra√ß√£o)

Aplica√ß√£o (Back-end)

API em Java (Spring Boot): gerenciamento de usu√°rios, alertas e sensores

API em .NET 8: geolocaliza√ß√£o, rotas e dados da infraestrutura

Servi√ßos (Integra√ß√£o e IoT)

Node-RED para coleta de dados dos sensores ESP32

Servi√ßos de mensageria (MQTT ou HTTP)

Servi√ßo de mapa geoespacial (ex: Leaflet ou Mapbox)

Dados

Oracle: dados estruturados (usu√°rios, ocorr√™ncias, registros)

MongoDB: dados semiestruturados (logs, imagens, sensores)

üî∑ 4. Arquitetura de Tecnologia 
Conectividade e equipamentos:

Rede Wi-Fi e 4G para dispositivos m√≥veis.

Rede local (LAN) para sensores e c√¢meras em √°reas de risco.

VPN entre APIs e bancos de dados.

Acesso via HTTPS (TLS/SSL) com autentica√ß√£o JWT.

Devices de acesso:

Smartphones (usu√°rios e operadores)

Notebooks (administra√ß√£o)

Placas ESP32 com sensores DHT11/DHT22, GPS e c√¢meras

Servidores e Software:

Backend hospedado em cont√™ineres Docker (Java e .NET)

Node-RED rodando em uma Raspberry Pi ou em nuvem (ex: Heroku, AWS EC2)

Oracle DB + MongoDB em servidor Linux (VM ou nuvem)

Sistemas operacionais: Ubuntu Server, Windows 11 (admin)

Softwares necess√°rios por m√°quina:

Desenvolvedores: VS Code, Docker, Node.js, Postman

Servidores: Java 21, .NET SDK 8, Docker Engine, Node-RED

Admins: Navegador atualizado, VPN Client, App Mobile